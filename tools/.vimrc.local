"*****************************************************************************
""execute: vim +PlugInstall +qall
"*****************************************************************************

let g:go_version_warning = 0

"syntastic
let g:syntastic_cpp_compiler = 'g++'
let g:syntastic_cpp_compiler_options = '-std=c++11 -stdlib=libc++'

set path+=**

set fileencodings=utf-8,gbk,gb2312,big5

"set tabstop=4 "制表符的宽度
"set softtabstop=4 "软制表符的宽度（制表符和空格结合）
"set expandtab "用空格代替制表符（用其它编辑器查看就可以统一）

"set clipboard+=unnamed
"set t_Co=256
set bg=dark
set nobomb
set nobinary

noremap <C-j> :cn<CR>
noremap <C-k> :cp<CR>

"vimrc
nmap <leader>vs :source $HOME/.vimrc<CR>
nmap <leader>ve :e $HOME/.vimrc<CR>

"fold
set foldmethod=indent "syntax很卡
set foldlevel=100  "初始不fold

if has("cscope")
	set csto=1
	set cscopequickfix=c-,d-,e-,g-,i-,s-,t-
	set cst
	nmap <silent><leader>ss :cs find s <C-R>=expand("<cword>")<CR><CR>:copen<CR>
	"imap <silent><leader>ss <ESC><leader>ss
	nmap <silent><leader>sg :cs find g <C-R>=expand("<cword>")<CR><CR>:copen<CR>
	"imap <silent><leader>sg <ESC><leader>sg
	nmap <silent><leader>sc :cs find c <C-R>=expand("<cword>")<CR><CR>:copen<CR>
	"imap <silent><leader>sc <ESC><leader>sc
	nmap <silent><leader>st :cs find t <C-R>=expand("<cword>")<CR><CR>:copen<CR>
	"imap <silent><leader>st <ESC><leader>st
	nmap <silent><leader>se :cs find e <C-R>=expand("<cword>")<CR><CR>:copen<CR>
	"imap <silent><leader>se <ESC><leader>se
	nmap <silent><leader>sf :cs find f <C-R>=expand("<cfile>")<CR><CR>:copen<CR>
	"imap <silent><leader>sf <ESC><leader>sf
	nmap <silent><leader>si :cs find i <C-R>=expand("<cfile>")<CR>$<CR>:copen<CR>
	"imap <silent><leader>si <ESC><leader>si
	nmap <silent><leader>sd :cs find d <C-R>=expand("<cword>")<CR><CR>:copen<CR>
	"imap <silent><leader>sd <ESC><leader>sd
endif

"tags
function! s:generate_ctags(path, force)
    let path_len = strlen(a:path)
    if path_len == 0
        return
    endif
    if (strpart(a:path, path_len-1) == "/")
        let a:path = strpart(a:path, 0, path_len-1)
    endif
    let cur_dir = getcwd()
    silent! execute "cd " . a:path

    let cscope_cmd ="!cscope -bq -i "
    let tags_file = a:path . "/.tags"
    let cscope_file = a:path . "/.cscope.files"
    let cscope_out = a:path . "/.cscope.out"

    if (executable("ctags"))
        if !filereadable(tags_file) || a:force==1
            echo "building " . cscope_file . " ... "
            silent! execute "!find " . a:path . " -name '*.h' -o -name '*.hpp' -o -name '*.c' -o -name '*.cc' -o -name '*.cpp' -o -name '*.lua' -o -name '*.java'> " . cscope_file
            echo "building " . tags_file . " ... "
            silent! execute '!ctags -R -h ".c.cc.cpp.h.hpp.lua.java" --c++-kinds=+p --fields=+ialS --extra=+q -L ' . cscope_file . ' -o ' . tags_file
        endif
        execute "set tags+=" . tags_file
    endif
    if (executable("cscope") && has("cscope"))
        if !filereadable(cscope_out) || a:force==1
            echo "building " . cscope_out  . " ... "
            silent! execute cscope_cmd . cscope_file . " -f " . cscope_out
        endif
        execute "cs add " . cscope_out
    endif
    execute "cd " . cur_dir
endfunction
function! AddTags()
    let path = input("add the path for tags: ", "", "file")
    let path_len = strlen(path)
    if path_len == -1
        return
    endif
    if (strpart(path, path_len-1) == '/')
        let path = strpart(path, 0, path_len-1)
    endif
    call s:generate_ctags(path, 1)
endfunction
function! OpenTags()
    call s:generate_ctags(".",0)
endfunction
nmap <silent><leader>o :call OpenTags()<CR>
nmap <silent><leader>a :call AddTags()<CR>

"vim-easygrep
"<Leader>vv  - Grep for the word under the cursor, match all occurences,
"              like |gstar|
"<Leader>vV  - Grep for the word under the cursor, match whole word, like
"              |star|
"<Leader>va  - Like vv, but add to existing list
"<Leader>vA  - Like vV, but add to existing list
"<Leader>vr  - Perform a global search on the word under the cursor
"              and prompt for a pattern with which to replace it.
"<Leader>vo  - Select the files to search in and set grep options
"<Leader>vy* - Invoke any option from the options explorer, where * is the
"              shortcut for that option.
"              e.g. <Leader>vyr - toggles recursion
"                   <Leader>vyb - sets buffer grepping mode
"                   etc.
